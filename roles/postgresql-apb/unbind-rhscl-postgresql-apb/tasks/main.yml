---
# Make sure we have facts in case the playbook that calls this role
# does not.  Need environment variable PATH

- name: Gather Facts
  setup:

# Download, install pip, and use pip to install the
# psycopg2-binary package so that we can use the
# postgresql_* ansible modules.

- name: Download Package
  get_url:
    url: "{{ pip_url }}"
    dest: /tmp/pip.sh
    mode: 0755
  register: download

- name: Install Python pip for apb user
  command: "{{ download['dest'] }} --user"

- name: Install psycopg2-binary
  pip:
    name: "psycopg2-binary"
    extra_args: "--user"
  environment:
    PATH: "{{ ansible_env['PATH'] }}:{{ local_path }}"


#############################################################################
# revoke the user privileges to the created database
#############################################################################
- name: revoke privileges on database
  postgresql_privs:
    db: "{{ _apb_bind_creds.DB_NAME }}"
    port: "{{ _apb_provision_creds.DB_PORT }}"
    role: "{{ _apb_bind_creds.DB_USER }}"
    login_host: "{{ _apb_provision_creds.DB_HOST }}.{{ namespace }}"
    login_user: "{{ _apb_provision_creds.DB_ADMIN_USER }}"
    login_password: "{{ _apb_provision_creds.DB_ADMIN_PASSWORD }}"
    type: database
    privs: ALL
    state: "{{ state }}"
#############################################################################
# Remove user for the new database
#############################################################################
- name: delete database user
  postgresql_user:
    db: "{{ _apb_bind_creds.DB_NAME }}"
    name: "{{ _apb_bind_creds.DB_USER }}"
    password: "{{ _apb_bind_creds.DB_PASSWORD }}"
    port: "{{ _apb_provision_creds.DB_PORT }}"
    login_host: "{{ _apb_provision_creds.DB_HOST }}.{{ namespace }}"
    login_user: "{{ _apb_provision_creds.DB_ADMIN_USER }}"
    login_password: "{{ _apb_provision_creds.DB_ADMIN_PASSWORD }}"
    encrypted: yes
    state: "{{ state }}"


